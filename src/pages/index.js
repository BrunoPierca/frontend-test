import Head from "next/head";
import useSWRInfinite from 'swr/infinite'
import axios from "axios";
import { useState } from "react";
import {
  Container,
  Stack,
  Button,
  SimpleGrid,
  Flex,
  useDisclosure,
  Skeleton,
} from "@chakra-ui/react";

import PokemonCard from "@/components/PokemonCard";
import PokemonModal from "@/components/PokemonModal";

import Navbar, { navbarHeight } from "@/components/Navbar";

const fetchPokemonList = async (url) => {
  try {
    const { data } = await axios.get(url)
    return data
  } catch (error) {
    console.log(error)
    return error
  }
}


const itemsPerPage = 20;

const getKey = (pageIndex) => {
  // add the cursor to the API endpoint
  return `https://pokeapi.co/api/v2/pokemon/?limit=${itemsPerPage}&offset=${itemsPerPage * pageIndex}`
}
export default function Home() {
  const pokemonDataModal = useDisclosure();

  const { data, error, isLoading, setSize, size } = useSWRInfinite(getKey, fetchPokemonList);
  const [selectedPokemon, setSelectedPokemon] = useState();

  const isLoadingMore = isLoading || (size > 0 && data && typeof data[size - 1] === "undefined");

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  }

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex alignItems="center" direction={"column"} minH="100vh" justifyContent="center">
        <Navbar />
        <Container paddingTop={navbarHeight} maxW="container.lg">
          <Stack p="5" alignItems="center" spacing="5">
            <Skeleton isLoaded={!isLoading}>
              <SimpleGrid spacing="5" columns={{ base: 1, md: 5 }}>
                {data && data.map((page) => page.results.map((pokemon) => <PokemonCard
                  key={pokemon.url}
                  handleViewPokemon={handleViewPokemon}
                  pokemon={pokemon}
                />))}
              </SimpleGrid>

            </Skeleton>
            <Button isLoading={isLoadingMore} onClick={() => setSize(size + 1)}>
              Cargar m√°s
            </Button>
          </Stack>
        </Container>
      </Flex>
      <PokemonModal pokemonDataModal={pokemonDataModal} selectedPokemon={selectedPokemon} />
    </>
  );
}
